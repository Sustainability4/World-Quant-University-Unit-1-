# -*- coding: utf-8 -*-
"""Set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LrrXCVt1v2KJhRN_BSL15tjgjlsLwd4w
"""

# set is just like a list. It is mutable and hetrogeneous. Only issue with set is that it has unordered data. We can walk through it by an example. 
# set is defined by curly braces 
example_set = {'Rohan', 26, 178, 78}
print(example_set)

# Being unordered we cannot index or slice the set. If we try to do that it will simply show an error. 
example_set[1]

# we can pop items from the set again in no particular order. 
# Note that 178 is popped out randomly from the set. It has got nothing to do with the index of 178. 
print(example_set)
print(example_set.pop())
print(example_set)

# We can add elements to the set like we can do in a list. Again in no particular order. Add function is like append for list. 
# We can update the elements in a set which work pretty much in a same way as a list intends to work. Update function for set is just like an extend function for list 
example_set.add("True")
print(example_set)
example_set.update([58.1, "red"])
print(example_set)

# One way of definig sets is by using a curly braces. We can also define sets in a different manner by using an inbuilt function in python 
# One interesting thing to note here is that sets does not contain duplicate values. They actually omit the duplicate values and take only one of them in it
# This is one of the very interesting properties of set that can be used to store data. 
print(set([23,609,10,5,23,302]))
d = {12, 12, 13, 14, 12, 12}
print(d)

# Sets are quite useful in making comparision between the data. 
student_a_courses = {'history', 'english', 'biology', 'theatre'}
student_b_courses = {'biology', 'english', 'mathematics', 'computer science'}

print(student_a_courses.intersection(student_b_courses))
print(student_a_courses.union(student_b_courses))
print(student_a_courses.difference(student_b_courses))
print(student_b_courses.difference(student_a_courses))
print(student_a_courses.symmetric_difference(student_b_courses))
#Symmetric difference between A and B is (A union B)-(A intersection B)

