# -*- coding: utf-8 -*-
"""tuple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_PdWk9eF5otCPvSG9Qjmkz_WKbPR3Hp

#Tuple
"""

# Tuple is extreamely similar to a list with just one major difference. It is immutable. We can create it by using a parenthesis (). 
example_tuple = ('Rohan', 26, 178, 84)
print(example_tuple)

#Tuple is ordered and hence we can retrieve elements from a tuple. 
print(example_tuple[0])

#Tuple is immutable and hence we cannot change the value in a tuple 
example_tuple[1] = 44

# If we want to change the tuple we have to reassign the entire tuple
example_tuple = ('Rohan', 44, 178, 84)

print(example_tuple)

# Deletion is also a mutation and hence it also does not support the deletion of the tuple. This was a major drawback with lists where lists were not immutable 
# We could change the lists easily and any chnge in one assignment of the list lead to change in the other assignment of the list.  
del example_tuple[-1]

#Tuple does not require a paranthesis. We can create a tuple with comma separated values. 
another_example_tuple = 'Jill', 28, 165, 65
print(another_example_tuple)

# When a function returns multiple outputs, it returns them as tuple. For example 
def first_last(s):
    return s[0], s[-1]

chars = first_last("hello!")
print(chars)

# In many cases we may want to access these outputs as separate variables and not as tuples. In that case we use a technique called unpacking. 
# This technique can be used with any tuple not necessarily with the return output of a function. 
first_char, last_char = first_last("hello!")
print(first_char)
print(last_char)

#Lets take an example of unpacking directly on the tuple. 
name, age, height, weight = example_tuple
print(name)
print(age)
print(height)
print(weight)

# Unpacking does not only work with tuples. We can also unpack a list 
a, b, c = [1,2,3]

print(a)
print(b)
print(c)

# We can unpack every thing in python if the variables match the assignment 
# Here we get a value error. If the variables does not match the assignment. 
a,b = 1,2,3

#Lets take a reverse situation 
a,b,c = 1,2

"""Both the Python `list` and `tuple` are ordered and heterogeneous. However, unlike the `list`, the `tuple` is immutable, meaning it cannot be modified after it is created. Therefore, a `list` might be better for representing data that is expected to change over the course of a program, like a to-do list. A `tuple` might be better for representing data that is expected to be fixed, like the responses of an individual subject to a survey.



One common mistake people make with immutability and especially with tuples is to assume data structures inside the tuple are immutable because the tuple is immutable.  Lets see an example.
"""

tup = ([], 'a')
print(tup)
tup[0].append(1)
print(tup)

"""Even though the tuple itself is immutable, we cannot change the exact objects which it contains, those objects themselves can be mutated if they are mutable. As with anywhere mutability shows up, this requires the programmer to be careful and not assume data has not been modified in some context."""

